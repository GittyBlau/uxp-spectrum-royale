/**
 * Generated by Apache Royale Compiler from view/MainView.mxml
 * view.MainView
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('view.MainView');
/* Royale Dependency List: org.apache.royale.routing.Router,com.unhurdle.spectrum.FlexContainer,com.unhurdle.spectrum.List,org.apache.royale.html.elements.Div,com.unhurdle.spectrum.Application,models.NavProvider,org.apache.royale.events.Event,org.apache.royale.events.ValueChangeEvent,view.DemoPane,view.panes.AccordionPane,view.panes.ActionBarPane,view.panes.ActionButtonPane,view.panes.ActionMenuPane,view.panes.AlertPane,view.panes.AssetListPane,view.panes.AssetPane,view.panes.AvatarPane,view.panes.BannerPane,view.panes.BarLoaderPane,view.panes.BreadcrumbsPane,view.panes.ButtonGroupPane,view.panes.ButtonPane,view.panes.CalendarPane,view.panes.CardGalleryPane,view.panes.CardPane,view.panes.CardPreviewPane,view.panes.CheckboxPane,view.panes.CircleLoaderPane,view.panes.ClearButtonPane,view.panes.CoachMarkPane,view.panes.ComboboxPane,view.panes.ComingSoonPane,view.panes.CycleButtonPane,view.panes.DatePickerPane,view.panes.DialPane,view.panes.DialogPane,view.panes.DropIndicatorPane,view.panes.DropzonePane,view.panes.FieldGroupPane,view.panes.FieldLabelPane,view.panes.FormPane,view.panes.IllustratedMessagePane,view.panes.LabelPane,view.panes.LinkPane,view.panes.LogicButtonPane,view.panes.MenuPane,view.panes.MeterPane,view.panes.MillerColumnsPane,view.panes.PagesPane,view.panes.PaginationButtonStylePane,view.panes.PaginationExplicitPane,view.panes.PaginationPagePane,view.panes.PopoverPane,view.panes.QuickActionsPane,view.panes.RadioPane,view.panes.RatingPane,view.panes.SearchPane,view.panes.SearchWithinPane,view.panes.SideNavPane,view.panes.SliderPane,view.panes.SplitButtonPane,view.panes.SplitViewPane,view.panes.StatusLightPane,view.panes.SteplistPane,view.panes.StepperPane,view.panes.SwitchPane,view.panes.TabsPane,view.panes.TagsPane,view.panes.TextFieldPane,view.panes.TextareaPane,view.panes.ToastPane,view.panes.TooltipPane,view.panes.TreeViewPane,view.panes.TypographyInternationalizedPane,view.panes.TypographyPane,view.panes.WellPane*/

goog.require('com.unhurdle.spectrum.View');



/**
 * @constructor
 * @extends {com.unhurdle.spectrum.View}
 */
view.MainView = function() {
  view.MainView.base(this, 'constructor');
  
  this.navProvider_ = [new models.NavProvider("Accordion", view.panes.AccordionPane, "accordion"), new models.NavProvider("Action Bar", view.panes.ActionBarPane, "action_bar"), new models.NavProvider("Action Button", view.panes.ActionButtonPane, "action_button"), new models.NavProvider("Action Menu", view.panes.ActionMenuPane, "action_menu"), new models.NavProvider("Alert", view.panes.AlertPane, "alert"), new models.NavProvider("Asset", view.panes.AssetPane, "asset"), new models.NavProvider("AssetList", view.panes.AssetListPane, "asset_list"), new models.NavProvider("Avatar", view.panes.AvatarPane, "avatar"), new models.NavProvider("Banner", view.panes.BannerPane, "banner"), new models.NavProvider("Bar Loader", view.panes.BarLoaderPane, "bar_loader"), new models.NavProvider("Breadcrumbs", view.panes.BreadcrumbsPane, "breadcrumbs"), new models.NavProvider("Button", view.panes.ButtonPane, "button"), new models.NavProvider("Button Group", view.panes.ButtonGroupPane, "button_group"), new models.NavProvider("Calendar", view.panes.CalendarPane, "calendar"), new models.NavProvider("Card", view.panes.CardPane, "card"), new models.NavProvider("Card - Asset preview", view.panes.CardPreviewPane, "card_asset_preview"), new models.NavProvider("Card - Gallery", view.panes.CardGalleryPane, "card_gallery"), new models.NavProvider("Checkbox", view.panes.CheckboxPane, "checkbox"), new models.NavProvider("Circle Loader", view.panes.CircleLoaderPane, "circle_loader"), new models.NavProvider("Clear Button", view.panes.ClearButtonPane, "clear_button"), new models.NavProvider("Coach Mark", view.panes.CoachMarkPane, "coach_mark"), new models.NavProvider("Combobox", view.panes.ComboboxPane, "combobox"), new models.NavProvider("Cycle Button", view.panes.CycleButtonPane, "cycle_button"), new models.NavProvider("Date Picker", view.panes.DatePickerPane, "date_picker"), new models.NavProvider("Dial", view.panes.DialPane, "dial"), new models.NavProvider("Dialog", view.panes.DialogPane, "dialog"), new models.NavProvider("Drop Indicator", view.panes.DropIndicatorPane, "drop_indicator"), new models.NavProvider("Dropzone", view.panes.DropzonePane, "dropzone"), new models.NavProvider("Field Group", view.panes.FieldGroupPane, "field_group"), new models.NavProvider("Field Label", view.panes.FieldLabelPane, "field_label"), new models.NavProvider("Form", view.panes.FormPane, "form"), new models.NavProvider("Illustrated Message", view.panes.IllustratedMessagePane, "illustrated_message"), new models.NavProvider("Label", view.panes.LabelPane, "label"), new models.NavProvider("Link", view.panes.LinkPane, "link"), new models.NavProvider("Logic Button", view.panes.LogicButtonPane, "logic_button"), new models.NavProvider("Menu", view.panes.MenuPane, "menu"), new models.NavProvider("Meter", view.panes.MeterPane, "meter"), new models.NavProvider("Miller Columns", view.panes.MillerColumnsPane, "miller_columns"), new models.NavProvider("Page", view.panes.PagesPane, "page"), new models.NavProvider("Pagination - Button Style", view.panes.PaginationButtonStylePane, "pagination_button_style"), new models.NavProvider("Pagination - Explicit", view.panes.PaginationExplicitPane, "pagination_explicit"), new models.NavProvider("Pagination - Page", view.panes.PaginationPagePane, "pagination_page"), new models.NavProvider("Popover", view.panes.PopoverPane, "popover"), new models.NavProvider("Quick Actions", view.panes.QuickActionsPane, "quick_actions"), new models.NavProvider("Radio", view.panes.RadioPane, "radio"), new models.NavProvider("Rating", view.panes.RatingPane, "rating"), new models.NavProvider("Search", view.panes.SearchPane, "search"), new models.NavProvider("Search Within", view.panes.SearchWithinPane, "search_within"), new models.NavProvider("Side Navigation", view.panes.SideNavPane, "side_navigation"), new models.NavProvider("Slider", view.panes.SliderPane, "slider"), new models.NavProvider("Split Button", view.panes.SplitButtonPane, "split_button"), new models.NavProvider("SplitView", view.panes.SplitViewPane, "split_view"), new models.NavProvider("Status Light", view.panes.StatusLightPane, "status_light"), new models.NavProvider("Steplist", view.panes.SteplistPane, "steplist"), new models.NavProvider("Stepper", view.panes.StepperPane, "stepper"), new models.NavProvider("Switch", view.panes.SwitchPane, "switch"), new models.NavProvider("Table", view.panes.ComingSoonPane, "table"), new models.NavProvider("Tabs", view.panes.TabsPane, "tabs"), new models.NavProvider("Tags", view.panes.TagsPane, "tags"), new models.NavProvider("Text area", view.panes.TextareaPane, "text_area"), new models.NavProvider("Text Field", view.panes.TextFieldPane, "text_field"), new models.NavProvider("Toast", view.panes.ToastPane, "toast"), new models.NavProvider("Tooltip", view.panes.TooltipPane, "tooltip"), new models.NavProvider("Tree View", view.panes.TreeViewPane, "tree_view"), new models.NavProvider("Typography (Internationalized)", view.panes.TypographyInternationalizedPane, "typography_internationalized"), new models.NavProvider("Typography", view.panes.TypographyPane, "typography"), new models.NavProvider("Well", view.panes.WellPane, "well")];
  /**
   * @private
   * @type {org.apache.royale.routing.Router}
   */
  this.router_;
  
  /**
   * @private
   * @type {com.unhurdle.spectrum.FlexContainer}
   */
  this.mainGroup_;
  
  /**
   * @private
   * @type {com.unhurdle.spectrum.List}
   */
  this.sideNav_;
  
  /**
   * @private
   * @type {org.apache.royale.html.elements.Div}
   */
  this.paneHolder_;
  
  /**
   * @private
   * @type {Array}
   */
  this.mxmldd;
  
  /**
   * @private
   * @type {Array}
   */
  this.mxmldp;

  this.generateMXMLAttributes([
    1,
    'beads',
    null,
    [
      org.apache.royale.routing.Router,
      1,
      'id',
      true,
      'router',
      0,
      1,
      'stateChange',
      this.$EH_11_0,
      null
    ],
    0,
    0
  ]);
  
};
goog.inherits(view.MainView, com.unhurdle.spectrum.View);




/**
 * @type {Array}
 */
view.MainView.prototype.navProvider_ = null;


/**
 * @private
 */
view.MainView.prototype.view_MainView_setNavSelection = function() {
  var /** @type {org.apache.royale.routing.RouteState} */ routeState = this.router.routeState;
  this.sideNav.selectedIndex = 0;
  this.view_MainView_setNav();
  if (routeState.parameters) {
    if (routeState.parameters["appScale"]) {
      com.unhurdle.spectrum.Application.current.appScale = org.apache.royale.utils.Language.string(routeState.parameters["appScale"]);
    } else {
      com.unhurdle.spectrum.Application.current.appScale = "medium";
    }
    if (routeState.parameters["colorstop"]) {
      com.unhurdle.spectrum.Application.current.colorstop = org.apache.royale.utils.Language.string(routeState.parameters["colorstop"]);
    } else {
      com.unhurdle.spectrum.Application.current.colorstop = "light";
    }
  } else {
    com.unhurdle.spectrum.Application.current.appScale = "medium";
    com.unhurdle.spectrum.Application.current.colorstop = "light";
  }
};


/**
 * @private
 * @type {view.DemoPane}
 */
view.MainView.prototype.view_MainView_currentPane = null;


/**
 * @private
 */
view.MainView.prototype.view_MainView_setNav = function() {
  if (this.view_MainView_currentPane) {
    this.mainGroup.removeElement(this.view_MainView_currentPane);
  }
  var /** @type {models.NavProvider} */ provider = this.sideNav.selectedItem;
  this.view_MainView_currentPane = /* implicit cast */ org.apache.royale.utils.Language.as(org.apache.royale.utils.Language.resolveUncertain(new provider.reference()), view.DemoPane, true);
  this.mainGroup.addElement(this.view_MainView_currentPane);
};


/**
 * @private
 */
view.MainView.prototype.view_MainView_onNavChange = function() {
  this.view_MainView_setNav();
  var /** @type {models.NavProvider} */ provider = this.sideNav.selectedItem;
  this.router.routeState.title = provider.text;
  this.router.setState();
};


/**
 * @private
 */
view.MainView.prototype.view_MainView_hashChanged = function() {
  this.view_MainView_setNavSelection();
};


/**
 * @private
 * @param {string} hash
 */
view.MainView.prototype.view_MainView_setNavFromHash = function(hash) {
  var foreachiter0_target = this.navProvider;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var nav = foreachiter0_target[foreachiter0];
  {
    if (nav.hashLink == hash) {
      this.sideNav.selectedItem = nav;
      this.view_MainView_setNav();
      return;
    }
  }}
  
};


Object.defineProperties(view.MainView.prototype, /** @lends {view.MainView.prototype} */ {
/**
 * @type {Array}
 */
navProvider: {
/** @this {view.MainView} */
  get: function() {
  return this.navProvider_;
  },

/** @this {view.MainView} */
set: function(value) {
if (value != this.navProvider_) {
    var oldValue = this.navProvider_;
    this.navProvider_ = value;
    this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(
         this, "navProvider", oldValue, value));
}
}}}
);/**
 * @export
 * @param {org.apache.royale.events.Event} event
 */
view.MainView.prototype.$EH_11_0 = function(event)
{
  this.view_MainView_hashChanged();
};


/**
 * @export
 * @param {org.apache.royale.events.Event} event
 */
view.MainView.prototype.$EH_11_1 = function(event)
{
  this.view_MainView_onNavChange();
};


Object.defineProperties(view.MainView.prototype, /** @lends {view.MainView.prototype} */ {
  router: {
    /** @this {view.MainView} */
    get: function() {
      return this.router_;
    },
    /** @this {view.MainView} */
    set: function(value) {
      if (value != this.router_) {
        this.router_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'router', null, value));
      }
    }
  },
  mainGroup: {
    /** @this {view.MainView} */
    get: function() {
      return this.mainGroup_;
    },
    /** @this {view.MainView} */
    set: function(value) {
      if (value != this.mainGroup_) {
        this.mainGroup_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'mainGroup', null, value));
      }
    }
  },
  sideNav: {
    /** @this {view.MainView} */
    get: function() {
      return this.sideNav_;
    },
    /** @this {view.MainView} */
    set: function(value) {
      if (value != this.sideNav_) {
        this.sideNav_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'sideNav', null, value));
      }
    }
  },
  paneHolder: {
    /** @this {view.MainView} */
    get: function() {
      return this.paneHolder_;
    },
    /** @this {view.MainView} */
    set: function(value) {
      if (value != this.paneHolder_) {
        this.paneHolder_ = value;
        this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(this, 'paneHolder', null, value));
      }
    }
  },
  'MXMLDescriptor': {
    /** @this {view.MainView} */
    get: function() {
      if (this.mxmldd == undefined)
      {
        /** @type {Array} */
        var arr = view.MainView.superClass_.get__MXMLDescriptor.apply(this);
        /** @type {Array} */
        var data = [
          com.unhurdle.spectrum.FlexContainer,
          2,
          'id',
          true,
          'mainGroup',
          'wrap',
          true,
          false,
          0,
          0,
          [
            com.unhurdle.spectrum.List,
            2,
            'id',
            true,
            'sideNav',
            'style',
            true,
            'max-height:100vh;flex-shrink: 0; padding-left:14px; padding-right:14px; background-color:rgba(0.5,0.5,0.5,0.05)',
            0,
            1,
            'change',
            this.$EH_11_1,
            null,
            org.apache.royale.html.elements.Div,
            2,
            'id',
            true,
            'paneHolder',
            'style',
            true,
            'flex-grow: 1;',
            0,
            0,
            null
          ]
        ];
        if (arr)
          this.mxmldd = arr.concat(data);
        else
          this.mxmldd = data;
      }
      return this.mxmldd;
    }
  }
});
/**
 * @export
 */
view.MainView.prototype._bindings = [
1,
"navProvider",
null,
["sideNav", "dataProvider"],
0,
2,
"navProvider",
"valueChange",
0,
null,
null];
/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
view.MainView.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'MainView', qName: 'view.MainView', kind: 'class'  }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
view.MainView.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'navProvider': { type: 'Array', access: 'readwrite', declaredBy: 'view.MainView'},
        'router': { type: 'org.apache.royale.routing.Router', access: 'readwrite', declaredBy: 'view.MainView'},
        'mainGroup': { type: 'com.unhurdle.spectrum.FlexContainer', access: 'readwrite', declaredBy: 'view.MainView'},
        'sideNav': { type: 'com.unhurdle.spectrum.List', access: 'readwrite', declaredBy: 'view.MainView'},
        'paneHolder': { type: 'org.apache.royale.html.elements.Div', access: 'readwrite', declaredBy: 'view.MainView'}
      };
    },
    methods: function () {
      return {
        'MainView': { type: '', declaredBy: 'view.MainView'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
view.MainView.prototype.ROYALE_COMPILE_FLAGS = 9;
