/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/Switch.as
 * com.unhurdle.spectrum.Switch
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.Switch');
/* Royale Dependency List: com.unhurdle.spectrum.TextNode,com.unhurdle.spectrum.newElement,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.events.Event,org.apache.royale.utils.Language*/

goog.require('com.unhurdle.spectrum.SpectrumBase');



/**
 * <inject_html>
 * <link rel="stylesheet" href="assets/css/components/toggle/dist.css">
 * </inject_html>
 * 
 * @constructor
 * @extends {com.unhurdle.spectrum.SpectrumBase}
 */
com.unhurdle.spectrum.Switch = function() {
  com.unhurdle.spectrum.Switch.base(this, 'constructor');
};
goog.inherits(com.unhurdle.spectrum.Switch, com.unhurdle.spectrum.SpectrumBase);


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Switch.prototype.getSelector = function() {
  return "spectrum-ToggleSwitch";
};


/**
 * @private
 * @type {com.unhurdle.spectrum.TextNode}
 */
com.unhurdle.spectrum.Switch.prototype.com_unhurdle_spectrum_Switch__rightLabelElem = null;


/**
 * @private
 * @type {com.unhurdle.spectrum.TextNode}
 */
com.unhurdle.spectrum.Switch.prototype.com_unhurdle_spectrum_Switch__leftLabelElem = null;


/**
 * @private
 * @type {HTMLInputElement}
 */
com.unhurdle.spectrum.Switch.prototype.com_unhurdle_spectrum_Switch_input = null;


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Switch.prototype.createElement = function() {
  var /** @type {org.apache.royale.core.WrappedHTMLElement} */ elem = com.unhurdle.spectrum.Switch.superClass_.createElement.apply(this);
  this.com_unhurdle_spectrum_Switch_input = com.unhurdle.spectrum.newElement("input");
  this.com_unhurdle_spectrum_Switch_input.className = this.appendSelector("-input");
  this.com_unhurdle_spectrum_Switch_input.type = "checkbox";
  this.com_unhurdle_spectrum_Switch_input.addEventListener("change", org.apache.royale.utils.Language.closure(this.com_unhurdle_spectrum_Switch_handleInputChange, this, 'com_unhurdle_spectrum_Switch_handleInputChange'));
  elem.appendChild(this.com_unhurdle_spectrum_Switch_input);
  var /** @type {HTMLElement} */ span = com.unhurdle.spectrum.newElement("span");
  span.className = this.appendSelector("-switch");
  elem.appendChild(span);
  return elem;
};


/**
 * @override
 */
com.unhurdle.spectrum.Switch.prototype.addedToParent = function() {
  com.unhurdle.spectrum.Switch.superClass_.addedToParent.apply(this);
  if (this.com_unhurdle_spectrum_Switch__leftLabel && !this.com_unhurdle_spectrum_Switch__leftLabelElem) {
    this.com_unhurdle_spectrum_Switch__leftLabelElem = new com.unhurdle.spectrum.TextNode("label");
    this.com_unhurdle_spectrum_Switch__leftLabelElem.className = this.appendSelector("-label");
    this.com_unhurdle_spectrum_Switch__leftLabelElem.text = this.com_unhurdle_spectrum_Switch__leftLabel;
    this.element.insertBefore(this.com_unhurdle_spectrum_Switch__leftLabelElem.element, this.com_unhurdle_spectrum_Switch_input);
  }
  if (this.com_unhurdle_spectrum_Switch__rightLabel || !this.com_unhurdle_spectrum_Switch__leftLabelElem) {
    this.com_unhurdle_spectrum_Switch__rightLabelElem = new com.unhurdle.spectrum.TextNode("label");
    this.com_unhurdle_spectrum_Switch__rightLabelElem.className = this.appendSelector("-label");
    this.com_unhurdle_spectrum_Switch__rightLabelElem.text = this.com_unhurdle_spectrum_Switch__rightLabel;
    this.element.appendChild(this.com_unhurdle_spectrum_Switch__rightLabelElem.element);
  }
  this.com_unhurdle_spectrum_Switch_handleInputChange(null);
};


/**
 * @private
 * @param {org.apache.royale.events.Event} ev
 */
com.unhurdle.spectrum.Switch.prototype.com_unhurdle_spectrum_Switch_handleInputChange = function(ev) {
  var /** @type {string} */ label = this.com_unhurdle_spectrum_Switch_input.checked ? this.onLabel : this.offLabel;
  if (label) {
    if (this.com_unhurdle_spectrum_Switch__rightLabelElem) {
      this.com_unhurdle_spectrum_Switch__rightLabelElem.text = label;
    }
    if (this.com_unhurdle_spectrum_Switch__leftLabelElem) {
      this.com_unhurdle_spectrum_Switch__leftLabelElem.text = label;
    }
  } else {
    if (this.com_unhurdle_spectrum_Switch__rightLabelElem) {
      this.com_unhurdle_spectrum_Switch__rightLabelElem.text = this.com_unhurdle_spectrum_Switch__rightLabel;
    }
    if (this.com_unhurdle_spectrum_Switch__leftLabelElem) {
      this.com_unhurdle_spectrum_Switch__leftLabelElem.text = this.com_unhurdle_spectrum_Switch__leftLabel;
    }
  }
};


/**
 * @type {string}
 */
com.unhurdle.spectrum.Switch.prototype.onLabel = null;


/**
 * @type {string}
 */
com.unhurdle.spectrum.Switch.prototype.offLabel = null;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Switch.prototype.com_unhurdle_spectrum_Switch__rightLabel = "";


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Switch.prototype.com_unhurdle_spectrum_Switch__leftLabel = "";


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Switch.prototype.com_unhurdle_spectrum_Switch__disabled = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Switch.prototype.com_unhurdle_spectrum_Switch__quiet = false;


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Switch.prototype.rightLabel;


com.unhurdle.spectrum.Switch.prototype.get__rightLabel = function() {
  return this.com_unhurdle_spectrum_Switch__rightLabel;
};


com.unhurdle.spectrum.Switch.prototype.set__rightLabel = function(value) {
  this.com_unhurdle_spectrum_Switch__rightLabel = value;
  if (this.com_unhurdle_spectrum_Switch__rightLabelElem) {
    this.com_unhurdle_spectrum_Switch__rightLabelElem.text = value;
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Switch.prototype.leftLabel;


com.unhurdle.spectrum.Switch.prototype.get__leftLabel = function() {
  return this.com_unhurdle_spectrum_Switch__leftLabel;
};


com.unhurdle.spectrum.Switch.prototype.set__leftLabel = function(value) {
  this.com_unhurdle_spectrum_Switch__leftLabel = value;
  if (this.com_unhurdle_spectrum_Switch__leftLabelElem) {
    this.com_unhurdle_spectrum_Switch__leftLabelElem.text = value;
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Switch.prototype.checked;


com.unhurdle.spectrum.Switch.prototype.get__checked = function() {
  return this.com_unhurdle_spectrum_Switch_input.checked;
};


com.unhurdle.spectrum.Switch.prototype.set__checked = function(value) {
  if (value != this.com_unhurdle_spectrum_Switch_input.checked) {
    this.com_unhurdle_spectrum_Switch_input.checked = value;
  }
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Switch.prototype.disabled;


com.unhurdle.spectrum.Switch.prototype.get__disabled = function() {
  return this.com_unhurdle_spectrum_Switch__disabled;
};


com.unhurdle.spectrum.Switch.prototype.set__disabled = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Switch__disabled) {
    this.com_unhurdle_spectrum_Switch_input.disabled = value;
  }
  this.com_unhurdle_spectrum_Switch__disabled = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Switch.prototype.quiet;


com.unhurdle.spectrum.Switch.prototype.get__quiet = function() {
  return this.com_unhurdle_spectrum_Switch__quiet;
};


com.unhurdle.spectrum.Switch.prototype.set__quiet = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Switch__quiet) {
    this.toggle(this.valueToSelector("quiet"), value);
  }
  this.com_unhurdle_spectrum_Switch__quiet = value;
};


Object.defineProperties(com.unhurdle.spectrum.Switch.prototype, /** @lends {com.unhurdle.spectrum.Switch.prototype} */ {
/**
 * @type {string}
 */
rightLabel: {
get: com.unhurdle.spectrum.Switch.prototype.get__rightLabel,
set: com.unhurdle.spectrum.Switch.prototype.set__rightLabel},
/**
 * @type {string}
 */
leftLabel: {
get: com.unhurdle.spectrum.Switch.prototype.get__leftLabel,
set: com.unhurdle.spectrum.Switch.prototype.set__leftLabel},
/**
 * @type {boolean}
 */
checked: {
get: com.unhurdle.spectrum.Switch.prototype.get__checked,
set: com.unhurdle.spectrum.Switch.prototype.set__checked},
/**
 * @type {boolean}
 */
disabled: {
get: com.unhurdle.spectrum.Switch.prototype.get__disabled,
set: com.unhurdle.spectrum.Switch.prototype.set__disabled},
/**
 * @type {boolean}
 */
quiet: {
get: com.unhurdle.spectrum.Switch.prototype.get__quiet,
set: com.unhurdle.spectrum.Switch.prototype.set__quiet}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.Switch.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Switch', qName: 'com.unhurdle.spectrum.Switch', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.Switch.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'onLabel': { type: 'String', get_set: function (/** com.unhurdle.spectrum.Switch */ inst, /** * */ v) {return v !== undefined ? inst.onLabel = v : inst.onLabel;}},
        'offLabel': { type: 'String', get_set: function (/** com.unhurdle.spectrum.Switch */ inst, /** * */ v) {return v !== undefined ? inst.offLabel = v : inst.offLabel;}}
      };
    },
    accessors: function () {
      return {
        'rightLabel': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Switch'},
        'leftLabel': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Switch'},
        'checked': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Switch'},
        'disabled': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Switch'},
        'quiet': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Switch'}
      };
    },
    methods: function () {
      return {
        'Switch': { type: '', declaredBy: 'com.unhurdle.spectrum.Switch'},
        'addedToParent': { type: 'void', declaredBy: 'com.unhurdle.spectrum.Switch'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.Switch.prototype.ROYALE_COMPILE_FLAGS = 11;
