/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/ComboBoxList.as
 * com.unhurdle.spectrum.ComboBoxList
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.ComboBoxList');
/* Royale Dependency List: com.unhurdle.spectrum.Menu*/

goog.require('com.unhurdle.spectrum.Popover');
goog.require('org.apache.royale.core.IPopUp');



/**
 * @constructor
 * @extends {com.unhurdle.spectrum.Popover}
 * @implements {org.apache.royale.core.IPopUp}
 */
com.unhurdle.spectrum.ComboBoxList = function() {
  com.unhurdle.spectrum.ComboBoxList.base(this, 'constructor');
  this.com_unhurdle_spectrum_ComboBoxList__list = new com.unhurdle.spectrum.Menu();
  this.floating = true;
  this.tabFocusable = false;
};
goog.inherits(com.unhurdle.spectrum.ComboBoxList, com.unhurdle.spectrum.Popover);


/**
 * @private
 * @type {com.unhurdle.spectrum.Menu}
 */
com.unhurdle.spectrum.ComboBoxList.prototype.com_unhurdle_spectrum_ComboBoxList__list = null;


/**
 * @override
 */
com.unhurdle.spectrum.ComboBoxList.prototype.addedToParent = function() {
  com.unhurdle.spectrum.ComboBoxList.superClass_.addedToParent.apply(this);
  this.addElement(this.com_unhurdle_spectrum_ComboBoxList__list);
};


/**
 * @nocollapse
 * @export
 * @type {com.unhurdle.spectrum.Menu}
 */
com.unhurdle.spectrum.ComboBoxList.prototype.list;


com.unhurdle.spectrum.ComboBoxList.prototype.get__list = function() {
  return this.com_unhurdle_spectrum_ComboBoxList__list;
};


com.unhurdle.spectrum.ComboBoxList.prototype.set__list = function(value) {
  this.com_unhurdle_spectrum_ComboBoxList__list = value;
};


com.unhurdle.spectrum.ComboBoxList.prototype.set__tabFocusable = function(value) {
  this._tabFocusable = value;
  if (value) {
    this.setAttribute("tabindex", 0);
  } else {
    this.setAttribute("tabindex", -1);
  }
};


com.unhurdle.spectrum.ComboBoxList.prototype.set__open = function(value) {
  com.unhurdle.spectrum.ComboBoxList.superClass_.set__open.apply(this, [ value] );
  if (value) {
    this.com_unhurdle_spectrum_ComboBoxList__list.focus();
  } else {
    this.com_unhurdle_spectrum_ComboBoxList__list.blur();
  }
};


Object.defineProperties(com.unhurdle.spectrum.ComboBoxList.prototype, /** @lends {com.unhurdle.spectrum.ComboBoxList.prototype} */ {
/**
 * @type {com.unhurdle.spectrum.Menu}
 */
list: {
get: com.unhurdle.spectrum.ComboBoxList.prototype.get__list,
set: com.unhurdle.spectrum.ComboBoxList.prototype.set__list},
/**
 * @type {boolean}
 */
tabFocusable: {
get: com.unhurdle.spectrum.Group.prototype.get__tabFocusable,
set: com.unhurdle.spectrum.ComboBoxList.prototype.set__tabFocusable},
/**
 * @type {boolean}
 */
open: {
get: com.unhurdle.spectrum.Popover.prototype.get__open,
set: com.unhurdle.spectrum.ComboBoxList.prototype.set__open}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.ComboBoxList.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ComboBoxList', qName: 'com.unhurdle.spectrum.ComboBoxList', kind: 'class' }], interfaces: [org.apache.royale.core.IPopUp] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.ComboBoxList.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'list': { type: 'com.unhurdle.spectrum.Menu', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.ComboBoxList'},
        'tabFocusable': { type: 'Boolean', access: 'writeonly', declaredBy: 'com.unhurdle.spectrum.ComboBoxList'},
        'open': { type: 'Boolean', access: 'writeonly', declaredBy: 'com.unhurdle.spectrum.ComboBoxList'}
      };
    },
    methods: function () {
      return {
        'ComboBoxList': { type: '', declaredBy: 'com.unhurdle.spectrum.ComboBoxList'},
        'addedToParent': { type: 'void', declaredBy: 'com.unhurdle.spectrum.ComboBoxList'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.ComboBoxList.prototype.ROYALE_COMPILE_FLAGS = 11;
