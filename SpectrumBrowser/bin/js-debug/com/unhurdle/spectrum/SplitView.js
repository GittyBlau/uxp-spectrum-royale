/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/SplitView.as
 * com.unhurdle.spectrum.SplitView
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.SplitView');
/* Royale Dependency List: com.unhurdle.spectrum.ISpectrumElement,com.unhurdle.spectrum.Splitter,org.apache.royale.core.IChild,org.apache.royale.core.ILayoutChild,org.apache.royale.utils.number.getPercent,org.apache.royale.utils.number.pinValue,org.apache.royale.utils.Language*/

goog.require('com.unhurdle.spectrum.Group');



/**
 * <inject_html>
 * <link rel="stylesheet" href="assets/css/components/splitview/dist.css">
 * </inject_html>
 * 
 * @constructor
 * @extends {com.unhurdle.spectrum.Group}
 */
com.unhurdle.spectrum.SplitView = function() {
  com.unhurdle.spectrum.SplitView.base(this, 'constructor');
  this.direction = "horizontal";
};
goog.inherits(com.unhurdle.spectrum.SplitView, com.unhurdle.spectrum.Group);


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.unhurdle.spectrum.SplitView.RESIZE_START = "resizeStart";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
com.unhurdle.spectrum.SplitView.RESIZE_FINISH = "resizeFinish";


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.SplitView.prototype.getSelector = function() {
  return "spectrum-SplitView";
};


/**
 * @private
 * @type {com.unhurdle.spectrum.Splitter}
 */
com.unhurdle.spectrum.SplitView.prototype.com_unhurdle_spectrum_SplitView__splitter = null;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.SplitView.prototype.com_unhurdle_spectrum_SplitView__isDraggable = false;


/**
 * @protected
 * @param {number} val
 */
com.unhurdle.spectrum.SplitView.prototype.positionElements = function(val) {
  this.com_unhurdle_spectrum_SplitView_positionCollapsed = val;
  var /** @type {number} */ percent = val;
  if (this.numElements > 2) {
    if (this.direction === "horizontal") {
      this.getElementAt(0).percentWidth = percent;
      this.splitter.setStyle("left", "0");
      this.getElementAt(2).percentWidth = 100 - percent;
    } else {
      this.getElementAt(0).percentHeight = percent;
      this.splitter.setStyle("top", "0");
      this.getElementAt(2).percentHeight = 100 - percent;
    }
  }
};


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.SplitView.prototype.com_unhurdle_spectrum_SplitView__position = NaN;


/**
 * @private
 * @type {number}
 */
com.unhurdle.spectrum.SplitView.prototype.com_unhurdle_spectrum_SplitView__positionCollapsed = NaN;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.SplitView.prototype.com_unhurdle_spectrum_SplitView__direction = null;


/**
 * @private
 * @param {MouseEvent} e
 */
com.unhurdle.spectrum.SplitView.prototype.com_unhurdle_spectrum_SplitView_onMouseDown = function(e) {
  this.dispatchEvent(new Event("resizeStart"));
  e.preventDefault();
  e.stopImmediatePropagation();
  window.addEventListener('mouseup', org.apache.royale.utils.Language.closure(this.com_unhurdle_spectrum_SplitView_onMouseUp, this, 'com_unhurdle_spectrum_SplitView_onMouseUp'));
  this.element.addEventListener('mousemove', org.apache.royale.utils.Language.closure(this.com_unhurdle_spectrum_SplitView_onMouseMove, this, 'com_unhurdle_spectrum_SplitView_onMouseMove'));
};


/**
 * @private
 * @param {MouseEvent} e
 */
com.unhurdle.spectrum.SplitView.prototype.com_unhurdle_spectrum_SplitView_onMouseUp = function(e) {
  this.dispatchEvent(new Event("resizeFinish"));
  window.removeEventListener('mouseup', org.apache.royale.utils.Language.closure(this.com_unhurdle_spectrum_SplitView_onMouseUp, this, 'com_unhurdle_spectrum_SplitView_onMouseUp'));
  this.element.removeEventListener('mousemove', org.apache.royale.utils.Language.closure(this.com_unhurdle_spectrum_SplitView_onMouseMove, this, 'com_unhurdle_spectrum_SplitView_onMouseMove'));
};


/**
 * @private
 * @param {MouseEvent} e
 */
com.unhurdle.spectrum.SplitView.prototype.com_unhurdle_spectrum_SplitView_onMouseMove = function(e) {
  var /** @type {number} */ percent = NaN;
  //var /** @type {number} */ percent = NaN;
  var /** @type {ClientRect} */ clientRect = this.element.getBoundingClientRect();
  if (this.direction == "horizontal") {
    var /** @type {number} */ sliderLeft = clientRect.left;
    var /** @type {number} */ sliderWidth = clientRect.width;
    var /** @type {number} */ x = org.apache.royale.utils.number.pinValue(e.clientX - sliderLeft, 0, sliderWidth);
    percent = org.apache.royale.utils.number.getPercent(x, sliderWidth);
  } else {
    var /** @type {number} */ sliderTop = clientRect.top;
    var /** @type {number} */ sliderHeight = clientRect.height;
    var /** @type {number} */ y = org.apache.royale.utils.number.pinValue(e.clientY - sliderTop, 0, sliderHeight);
    percent = org.apache.royale.utils.number.getPercent(y, sliderHeight);
  }
  this.com_unhurdle_spectrum_SplitView__position = percent;
  this.positionElements(percent);
};


/**
 * @override
 */
com.unhurdle.spectrum.SplitView.prototype.addElement = function(c, dispatchEvent) {
  dispatchEvent = typeof dispatchEvent !== 'undefined' ? dispatchEvent : true;
  if (this.numElements == 1) {
    com.unhurdle.spectrum.SplitView.superClass_.addElement.apply(this, [ this.splitter] );
  }
  com.unhurdle.spectrum.SplitView.superClass_.addElement.apply(this, [ c, dispatchEvent] );
  c.toggle(this.appendSelector("-pane"), true);
  this.positionElements(this.position);
};


/**
 * @nocollapse
 * @type {com.unhurdle.spectrum.Splitter}
 */
com.unhurdle.spectrum.SplitView.prototype.splitter;


com.unhurdle.spectrum.SplitView.prototype.get__splitter = function() {
  if (!this.com_unhurdle_spectrum_SplitView__splitter) {
    this.com_unhurdle_spectrum_SplitView__splitter = new com.unhurdle.spectrum.Splitter();
    this.com_unhurdle_spectrum_SplitView__splitter.addEventListener("mousedown", org.apache.royale.utils.Language.closure(this.com_unhurdle_spectrum_SplitView_onMouseDown, this, 'com_unhurdle_spectrum_SplitView_onMouseDown'));
    this.splitter.cursor = this.direction == "horizontal" ? "col-resize" : "row-resize";
  }
  return this.com_unhurdle_spectrum_SplitView__splitter;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.SplitView.prototype.isDraggable;


com.unhurdle.spectrum.SplitView.prototype.get__isDraggable = function() {
  return this.com_unhurdle_spectrum_SplitView__isDraggable;
};


com.unhurdle.spectrum.SplitView.prototype.set__isDraggable = function(value) {
  if (this.com_unhurdle_spectrum_SplitView__isDraggable == value) {
    return;
  }
  this.splitter.toggle("is-draggable", value);
  this.com_unhurdle_spectrum_SplitView__isDraggable = value;
  this.splitter.draggable = value;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.SplitView.prototype.position;


com.unhurdle.spectrum.SplitView.prototype.get__position = function() {
  return this.com_unhurdle_spectrum_SplitView__position;
};


com.unhurdle.spectrum.SplitView.prototype.set__position = function(value) {
  if (!isNaN(value)) {
    this.com_unhurdle_spectrum_SplitView__position = value;
    this.positionElements(value);
    this.com_unhurdle_spectrum_SplitView_positionCollapsed = value;
  }
};


/**
 * @type {number}
 */
com.unhurdle.spectrum.SplitView.prototype.com_unhurdle_spectrum_SplitView_positionCollapsed;


com.unhurdle.spectrum.SplitView.prototype.get__com_unhurdle_spectrum_SplitView_positionCollapsed = function() {
  return this.com_unhurdle_spectrum_SplitView__positionCollapsed;
};


com.unhurdle.spectrum.SplitView.prototype.set__com_unhurdle_spectrum_SplitView_positionCollapsed = function(value) {
  var /** @type {string} */ oldpositionCollapsed = null;
  var /** @type {string} */ newpositionCollapsed = null;
  if (value != this.com_unhurdle_spectrum_SplitView__positionCollapsed) {
    //var /** @type {string} */ oldpositionCollapsed = null;
    if (this.com_unhurdle_spectrum_SplitView__positionCollapsed < 1) {
      oldpositionCollapsed = "is-collapsed-start";
      this.splitter.toggle(oldpositionCollapsed, false);
    } else if (this.com_unhurdle_spectrum_SplitView__positionCollapsed > 99) {
      oldpositionCollapsed = "is-collapsed-end";
      this.splitter.toggle(oldpositionCollapsed, false);
    }
    if (value < 1 || value > 99) {
      //var /** @type {string} */ newpositionCollapsed = null;
      if (value < 1) {
        newpositionCollapsed = "is-collapsed-start";
      } else {
        newpositionCollapsed = "is-collapsed-end";
      }
      this.splitter.toggle(newpositionCollapsed, true);
      this.com_unhurdle_spectrum_SplitView__positionCollapsed = value;
    }
  }
};


/**
 * @nocollapse
 * @type {string}
 */
com.unhurdle.spectrum.SplitView.prototype.direction;


com.unhurdle.spectrum.SplitView.prototype.get__direction = function() {
  return this.com_unhurdle_spectrum_SplitView__direction;
};


com.unhurdle.spectrum.SplitView.prototype.set__direction = function(value) {
  switch (value) {
    case "vertical":
    
    case "horizontal":
      break;
    default:
      throw new Error("Invalid direction: " + value);
  }
  if (this.com_unhurdle_spectrum_SplitView__direction) {
    this.toggle(this.valueToSelector(this.com_unhurdle_spectrum_SplitView__direction), false);
  }
  this.toggle(this.valueToSelector(value), true);
  this.com_unhurdle_spectrum_SplitView__direction = value;
};


Object.defineProperties(com.unhurdle.spectrum.SplitView.prototype, /** @lends {com.unhurdle.spectrum.SplitView.prototype} */ {
/**
 * @type {com.unhurdle.spectrum.Splitter}
 */
splitter: {
get: com.unhurdle.spectrum.SplitView.prototype.get__splitter},
/**
 * @type {boolean}
 */
isDraggable: {
get: com.unhurdle.spectrum.SplitView.prototype.get__isDraggable,
set: com.unhurdle.spectrum.SplitView.prototype.set__isDraggable},
/**
 * @type {number}
 */
position: {
get: com.unhurdle.spectrum.SplitView.prototype.get__position,
set: com.unhurdle.spectrum.SplitView.prototype.set__position},
/**
 * @type {number}
 */
com_unhurdle_spectrum_SplitView_positionCollapsed: {
get: com.unhurdle.spectrum.SplitView.prototype.get__com_unhurdle_spectrum_SplitView_positionCollapsed,
set: com.unhurdle.spectrum.SplitView.prototype.set__com_unhurdle_spectrum_SplitView_positionCollapsed},
/**
 * @type {string}
 */
direction: {
get: com.unhurdle.spectrum.SplitView.prototype.get__direction,
set: com.unhurdle.spectrum.SplitView.prototype.set__direction}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.SplitView.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SplitView', qName: 'com.unhurdle.spectrum.SplitView', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.SplitView.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'isDraggable': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.SplitView'},
        'position': { type: 'Number', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.SplitView'}
      };
    },
    methods: function () {
      return {
        'SplitView': { type: '', declaredBy: 'com.unhurdle.spectrum.SplitView'},
        'addElement': { type: 'void', declaredBy: 'com.unhurdle.spectrum.SplitView', parameters: function () { return [ 'org.apache.royale.core.IChild', false ,'Boolean', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.SplitView.prototype.ROYALE_COMPILE_FLAGS = 11;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
com.unhurdle.spectrum.SplitView.prototype.ROYALE_INITIAL_STATICS = Object.keys(com.unhurdle.spectrum.SplitView);
