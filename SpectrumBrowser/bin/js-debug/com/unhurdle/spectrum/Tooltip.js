/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/Tooltip.as
 * com.unhurdle.spectrum.Tooltip
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.Tooltip');
/* Royale Dependency List: com.unhurdle.spectrum.Icon,com.unhurdle.spectrum.TextNode,com.unhurdle.spectrum.const.IconType,com.unhurdle.spectrum.newElement,org.apache.royale.core.WrappedHTMLElement*/

goog.require('com.unhurdle.spectrum.SpectrumBase');



/**
 * <inject_html>
 * <link rel="stylesheet" href="assets/css/components/tooltip/dist.css">
 * </inject_html>
 * 
 * @constructor
 * @extends {com.unhurdle.spectrum.SpectrumBase}
 */
com.unhurdle.spectrum.Tooltip = function() {
  com.unhurdle.spectrum.Tooltip.base(this, 'constructor');
  this.direction = "top";
};
goog.inherits(com.unhurdle.spectrum.Tooltip, com.unhurdle.spectrum.SpectrumBase);


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Tooltip.prototype.getSelector = function() {
  return "spectrum-Tooltip";
};


/**
 * @private
 * @type {com.unhurdle.spectrum.TextNode}
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip_span1 = null;


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Tooltip.prototype.getTag = function() {
  return "span";
};


/**
 * @private
 * @type {HTMLSpanElement}
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip_tipSpan = null;


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Tooltip.prototype.createElement = function() {
  com.unhurdle.spectrum.Tooltip.superClass_.createElement.apply(this);
  this.element.style.pointerEvents = "none";
  this.element.style.zIndex = 4;
  this.com_unhurdle_spectrum_Tooltip_span1 = new com.unhurdle.spectrum.TextNode("");
  this.com_unhurdle_spectrum_Tooltip_span1.element = com.unhurdle.spectrum.newElement("span");
  this.com_unhurdle_spectrum_Tooltip_span1.className = this.appendSelector("-label");
  this.element.appendChild(this.com_unhurdle_spectrum_Tooltip_span1.element);
  this.com_unhurdle_spectrum_Tooltip_tipSpan = com.unhurdle.spectrum.newElement("span");
  this.com_unhurdle_spectrum_Tooltip_tipSpan.className = this.appendSelector("-tip");
  this.element.appendChild(this.com_unhurdle_spectrum_Tooltip_tipSpan);
  return this.element;
};


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip__text = null;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip__info = false;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip__flavor = null;


/**
 * @private
 * @type {com.unhurdle.spectrum.Icon}
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip_iconElem = null;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip__icon = null;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip__direction = null;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip__tipPosition = "center";


/**
 * @private
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip_positionTip = function() {
  if (this.com_unhurdle_spectrum_Tooltip__tipPosition == "center") {
    this.com_unhurdle_spectrum_Tooltip_tipSpan.style.left = "";
    this.com_unhurdle_spectrum_Tooltip_tipSpan.style.top = "";
    return;
  }
  if (this.com_unhurdle_spectrum_Tooltip__tipPosition == "start") {
    var /** @type {string} */ stylStr = "calc(0% + 7px)";
  } else {
    stylStr = "calc(100% - 7px)";
  }
  switch (this.com_unhurdle_spectrum_Tooltip__direction) {
    case "left":
    
    case "right":
      this.com_unhurdle_spectrum_Tooltip_tipSpan.style.left = "";
      this.com_unhurdle_spectrum_Tooltip_tipSpan.style.top = stylStr;
      break;
    case "bottom":
    
    default:
      this.com_unhurdle_spectrum_Tooltip_tipSpan.style.left = stylStr;
      this.com_unhurdle_spectrum_Tooltip_tipSpan.style.top = "";
      break;
  }
};


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Tooltip.prototype.com_unhurdle_spectrum_Tooltip__isOpen = false;


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Tooltip.prototype.text;


com.unhurdle.spectrum.Tooltip.prototype.get__text = function() {
  return this.com_unhurdle_spectrum_Tooltip__text;
};


com.unhurdle.spectrum.Tooltip.prototype.set__text = function(value) {
  this.com_unhurdle_spectrum_Tooltip_span1.text = value;
  this.com_unhurdle_spectrum_Tooltip__text = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Tooltip.prototype.flavor;


com.unhurdle.spectrum.Tooltip.prototype.get__flavor = function() {
  return this.com_unhurdle_spectrum_Tooltip__flavor;
};


com.unhurdle.spectrum.Tooltip.prototype.set__flavor = function(value) {
  if (value != this.com_unhurdle_spectrum_Tooltip__flavor) {
    switch (value) {
      case "info":
      
      case "positive":
      
      case "negative":
      
      case "success":
      
      case "error":
      
      case "":
        break;
      default:
        throw new Error("Unknown flavor: " + value);
    }
    if (this.com_unhurdle_spectrum_Tooltip__flavor) {
      var /** @type {string} */ oldFlavor = this.valueToSelector(this.com_unhurdle_spectrum_Tooltip__flavor);
      this.toggle(oldFlavor, false);
    }
    var /** @type {string} */ newFlavor = this.valueToSelector(value);
    this.toggle(newFlavor, true);
  }
  this.com_unhurdle_spectrum_Tooltip__flavor = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Tooltip.prototype.icon;


com.unhurdle.spectrum.Tooltip.prototype.get__icon = function() {
  return this.com_unhurdle_spectrum_Tooltip__icon;
};


com.unhurdle.spectrum.Tooltip.prototype.set__icon = function(value) {
  var /** @type {string} */ type = null;
  //var /** @type {string} */ type = null;
  if (value == this.com_unhurdle_spectrum_Tooltip__icon) {
    return;
  }
  if (!value) {
    if (this.com_unhurdle_spectrum_Tooltip_iconElem) {
      this.com_unhurdle_spectrum_Tooltip_iconElem.setStyle("display", "none");
    }
    return;
  }
  switch (value) {
    case "info":
      type = com.unhurdle.spectrum.const.IconType.INFO_SMALL;
      break;
    case "success":
      type = com.unhurdle.spectrum.const.IconType.SUCCESS_SMALL;
      break;
    case "alert":
      type = com.unhurdle.spectrum.const.IconType.ALERT_SMALL;
      break;
    case "help":
      type = com.unhurdle.spectrum.const.IconType.HELP_SMALL;
      break;
    default:
      throw new Error("unknown type: " + value);
  }
  var /** @type {string} */ selector = com.unhurdle.spectrum.Icon.getCSSTypeSelector(type);
  if (!this.com_unhurdle_spectrum_Tooltip_iconElem) {
    this.com_unhurdle_spectrum_Tooltip_iconElem = new com.unhurdle.spectrum.Icon(selector);
    this.com_unhurdle_spectrum_Tooltip_iconElem.type = type;
    this.com_unhurdle_spectrum_Tooltip_iconElem.className = this.appendSelector("-typeIcon");
    this.addElementAt(this.com_unhurdle_spectrum_Tooltip_iconElem, 0);
  } else {
    this.com_unhurdle_spectrum_Tooltip_iconElem.selector = selector;
    this.com_unhurdle_spectrum_Tooltip_iconElem.type = type;
    this.com_unhurdle_spectrum_Tooltip_iconElem.setStyle("display", null);
  }
  this.com_unhurdle_spectrum_Tooltip__icon = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Tooltip.prototype.direction;


com.unhurdle.spectrum.Tooltip.prototype.get__direction = function() {
  return this.com_unhurdle_spectrum_Tooltip__direction;
};


com.unhurdle.spectrum.Tooltip.prototype.set__direction = function(value) {
  if (this.com_unhurdle_spectrum_Tooltip__direction) {
    this.toggle(this.getSelector() + "--" + this.com_unhurdle_spectrum_Tooltip__direction, false);
  }
  if (value) {
    switch (value) {
      case "left":
      
      case "right":
      
      case "bottom":
      
      case "top":
        this.toggle(this.getSelector() + "--" + value, true);
        break;
      default:
        throw new Error("Invalid direction: " + value);
    }
  }
  this.com_unhurdle_spectrum_Tooltip__direction = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Tooltip.prototype.tipPosition;


com.unhurdle.spectrum.Tooltip.prototype.get__tipPosition = function() {
  return this.com_unhurdle_spectrum_Tooltip__tipPosition;
};


com.unhurdle.spectrum.Tooltip.prototype.set__tipPosition = function(value) {
  if (value == this.com_unhurdle_spectrum_Tooltip__tipPosition) {
    return;
  }
  switch (value) {
    case "start":
      this.com_unhurdle_spectrum_Tooltip__tipPosition = value;
      break;
    case "end":
      this.com_unhurdle_spectrum_Tooltip__tipPosition = value;
      break;
    default:
      this.com_unhurdle_spectrum_Tooltip__tipPosition = "center";
      break;
  }
  this.com_unhurdle_spectrum_Tooltip_positionTip();
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Tooltip.prototype.isOpen;


com.unhurdle.spectrum.Tooltip.prototype.get__isOpen = function() {
  return this.com_unhurdle_spectrum_Tooltip__isOpen;
};


com.unhurdle.spectrum.Tooltip.prototype.set__isOpen = function(value) {
  if (value != !!this.com_unhurdle_spectrum_Tooltip__isOpen) {
    this.toggle("is-open", value);
  }
  this.com_unhurdle_spectrum_Tooltip__isOpen = value;
};


Object.defineProperties(com.unhurdle.spectrum.Tooltip.prototype, /** @lends {com.unhurdle.spectrum.Tooltip.prototype} */ {
/**
 * @type {string}
 */
text: {
get: com.unhurdle.spectrum.Tooltip.prototype.get__text,
set: com.unhurdle.spectrum.Tooltip.prototype.set__text},
/**
 * @type {string}
 */
flavor: {
get: com.unhurdle.spectrum.Tooltip.prototype.get__flavor,
set: com.unhurdle.spectrum.Tooltip.prototype.set__flavor},
/**
 * @type {string}
 */
icon: {
get: com.unhurdle.spectrum.Tooltip.prototype.get__icon,
set: com.unhurdle.spectrum.Tooltip.prototype.set__icon},
/**
 * @type {string}
 */
direction: {
get: com.unhurdle.spectrum.Tooltip.prototype.get__direction,
set: com.unhurdle.spectrum.Tooltip.prototype.set__direction},
/**
 * @type {string}
 */
tipPosition: {
get: com.unhurdle.spectrum.Tooltip.prototype.get__tipPosition,
set: com.unhurdle.spectrum.Tooltip.prototype.set__tipPosition},
/**
 * @type {boolean}
 */
isOpen: {
get: com.unhurdle.spectrum.Tooltip.prototype.get__isOpen,
set: com.unhurdle.spectrum.Tooltip.prototype.set__isOpen}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.Tooltip.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Tooltip', qName: 'com.unhurdle.spectrum.Tooltip', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.Tooltip.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'text': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Tooltip'},
        'flavor': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Tooltip'},
        'icon': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Tooltip'},
        'direction': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Tooltip'},
        'tipPosition': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Tooltip'},
        'isOpen': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Tooltip'}
      };
    },
    methods: function () {
      return {
        'Tooltip': { type: '', declaredBy: 'com.unhurdle.spectrum.Tooltip'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.Tooltip.prototype.ROYALE_COMPILE_FLAGS = 11;
