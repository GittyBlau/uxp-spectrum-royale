/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/CheckBox.as
 * com.unhurdle.spectrum.CheckBox
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.CheckBox');
/* Royale Dependency List: org.apache.royale.core.WrappedHTMLElement,org.apache.royale.events.ValueChangeEvent*/

goog.require('com.unhurdle.spectrum.SpectrumBase');



/**
 * <inject_html>
 * <link rel="stylesheet" href="assets/css/components/checkbox/dist.css">
 * </inject_html>
 * 
 * @constructor
 * @extends {com.unhurdle.spectrum.SpectrumBase}
 */
com.unhurdle.spectrum.CheckBox = function() {
  com.unhurdle.spectrum.CheckBox.base(this, 'constructor');
};
goog.inherits(com.unhurdle.spectrum.CheckBox, com.unhurdle.spectrum.SpectrumBase);


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.CheckBox.prototype.getSelector = function() {
  return "";
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.CheckBox.prototype.getTag = function() {
  return "sp-checkbox";
};


/**
 * @private
 */
com.unhurdle.spectrum.CheckBox.prototype.com_unhurdle_spectrum_CheckBox_elementClicked = function() {
  this.indeterminate = false;
  this.checked = !this.checked;
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.CheckBox.prototype.createElement = function() {
  var /** @type {org.apache.royale.core.WrappedHTMLElement} */ elem = com.unhurdle.spectrum.CheckBox.superClass_.createElement.apply(this);
  return elem;
};


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.CheckBox.prototype.com_unhurdle_spectrum_CheckBox__text = "";


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.com_unhurdle_spectrum_CheckBox__truncate = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.com_unhurdle_spectrum_CheckBox__invalid = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.com_unhurdle_spectrum_CheckBox__indeterminate = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.com_unhurdle_spectrum_CheckBox__disabled = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.com_unhurdle_spectrum_CheckBox__checked = false;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.com_unhurdle_spectrum_CheckBox__quiet = false;


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.CheckBox.prototype.text;


com.unhurdle.spectrum.CheckBox.prototype.get__text = function() {
  return this.com_unhurdle_spectrum_CheckBox__text;
};


com.unhurdle.spectrum.CheckBox.prototype.set__text = function(value) {
  if (this.com_unhurdle_spectrum_CheckBox__text != value) {
    this.element.innerHTML = value;
  }
  this.com_unhurdle_spectrum_CheckBox__text = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.truncate;


com.unhurdle.spectrum.CheckBox.prototype.get__truncate = function() {
  return this.com_unhurdle_spectrum_CheckBox__truncate;
};


com.unhurdle.spectrum.CheckBox.prototype.set__truncate = function(value) {
  
  this.com_unhurdle_spectrum_CheckBox__truncate = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.invalid;


com.unhurdle.spectrum.CheckBox.prototype.get__invalid = function() {
  return this.com_unhurdle_spectrum_CheckBox__invalid;
};


com.unhurdle.spectrum.CheckBox.prototype.set__invalid = function(value) {
  if (value != !!this.com_unhurdle_spectrum_CheckBox__invalid) {
    if (value) {
      this.setAttribute("invalid", true);
    } else {
      this.removeAttribute("invalid");
    }
  }
  this.com_unhurdle_spectrum_CheckBox__invalid = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.indeterminate;


com.unhurdle.spectrum.CheckBox.prototype.get__indeterminate = function() {
  return this.com_unhurdle_spectrum_CheckBox__indeterminate;
};


com.unhurdle.spectrum.CheckBox.prototype.set__indeterminate = function(value) {
  if (value != !!this.com_unhurdle_spectrum_CheckBox__indeterminate) {
    if (value) {
      this.setAttribute("indeterminate", true);
    } else {
      if (this.getAttribute("indeterminate")) {
        this.removeAttribute("indeterminate");
      }
    }
    this.checked = false;
  }
  this.com_unhurdle_spectrum_CheckBox__indeterminate = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.disabled;


com.unhurdle.spectrum.CheckBox.prototype.get__disabled = function() {
  return this.com_unhurdle_spectrum_CheckBox__disabled;
};


com.unhurdle.spectrum.CheckBox.prototype.set__disabled = function(value) {
  if (value != !!this.com_unhurdle_spectrum_CheckBox__disabled) {
    if (value) {
      this.setAttribute("disabled", true);
    } else {
      this.removeAttribute("disabled");
    }
  }
  this.com_unhurdle_spectrum_CheckBox__disabled = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.checked;


com.unhurdle.spectrum.CheckBox.prototype.get__checked = function() {
  return this.com_unhurdle_spectrum_CheckBox__checked;
};


com.unhurdle.spectrum.CheckBox.prototype.bindable__set__checked_com_unhurdle_spectrum_CheckBox = function(value) {
  if (value != !!this.com_unhurdle_spectrum_CheckBox__checked) {
    if (value) {
      this.setAttribute("checked", true);
    } else {
      this.removeAttribute("checked");
    }
    this.indeterminate = false;
  }
  this.com_unhurdle_spectrum_CheckBox__checked = value;
};


com.unhurdle.spectrum.CheckBox.prototype.set__checked = function(value) {
var oldValue = this.get__checked();
if (oldValue != value) {
this.bindable__set__checked_com_unhurdle_spectrum_CheckBox(value);
    this.dispatchEvent(org.apache.royale.events.ValueChangeEvent.createUpdateEvent(
         this, "checked", oldValue, value));
}
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.CheckBox.prototype.quiet;


com.unhurdle.spectrum.CheckBox.prototype.get__quiet = function() {
  return this.com_unhurdle_spectrum_CheckBox__quiet;
};


com.unhurdle.spectrum.CheckBox.prototype.set__quiet = function(value) {
  console.log('quiet');
  if (value != !!this.com_unhurdle_spectrum_CheckBox__quiet) {
    this.toggle(this.valueToSelector("quiet"), value);
  }
  this.com_unhurdle_spectrum_CheckBox__quiet = value;
};


Object.defineProperties(com.unhurdle.spectrum.CheckBox.prototype, /** @lends {com.unhurdle.spectrum.CheckBox.prototype} */ {
/**
 * @type {string}
 */
text: {
get: com.unhurdle.spectrum.CheckBox.prototype.get__text,
set: com.unhurdle.spectrum.CheckBox.prototype.set__text},
/**
 * @type {boolean}
 */
truncate: {
get: com.unhurdle.spectrum.CheckBox.prototype.get__truncate,
set: com.unhurdle.spectrum.CheckBox.prototype.set__truncate},
/**
 * @type {boolean}
 */
invalid: {
get: com.unhurdle.spectrum.CheckBox.prototype.get__invalid,
set: com.unhurdle.spectrum.CheckBox.prototype.set__invalid},
/**
 * @type {boolean}
 */
indeterminate: {
get: com.unhurdle.spectrum.CheckBox.prototype.get__indeterminate,
set: com.unhurdle.spectrum.CheckBox.prototype.set__indeterminate},
/**
 * @type {boolean}
 */
disabled: {
get: com.unhurdle.spectrum.CheckBox.prototype.get__disabled,
set: com.unhurdle.spectrum.CheckBox.prototype.set__disabled},
/**
 * @type {boolean}
 */
checked: {
get: com.unhurdle.spectrum.CheckBox.prototype.get__checked,
set: com.unhurdle.spectrum.CheckBox.prototype.set__checked},
/**
 * @type {boolean}
 */
quiet: {
get: com.unhurdle.spectrum.CheckBox.prototype.get__quiet,
set: com.unhurdle.spectrum.CheckBox.prototype.set__quiet}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.CheckBox.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'CheckBox', qName: 'com.unhurdle.spectrum.CheckBox', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.CheckBox.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'text': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.CheckBox'},
        'truncate': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.CheckBox'},
        'invalid': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.CheckBox'},
        'indeterminate': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.CheckBox'},
        'disabled': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.CheckBox'},
        'checked': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.CheckBox', metadata: function () { return [ { name: 'Bindable' } ]; }},
        'quiet': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.CheckBox'}
      };
    },
    methods: function () {
      return {
        'CheckBox': { type: '', declaredBy: 'com.unhurdle.spectrum.CheckBox'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.CheckBox.prototype.ROYALE_COMPILE_FLAGS = 11;
