/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/Splitter.as
 * com.unhurdle.spectrum.Splitter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.Splitter');
/* Royale Dependency List: com.unhurdle.spectrum.newElement*/

goog.require('com.unhurdle.spectrum.SpectrumBase');



/**
 * @constructor
 * @extends {com.unhurdle.spectrum.SpectrumBase}
 */
com.unhurdle.spectrum.Splitter = function() {
  com.unhurdle.spectrum.Splitter.base(this, 'constructor');
};
goog.inherits(com.unhurdle.spectrum.Splitter, com.unhurdle.spectrum.SpectrumBase);


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Splitter.prototype.getSelector = function() {
  return "spectrum-SplitView-splitter";
};


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Splitter.prototype.com_unhurdle_spectrum_Splitter__draggable = false;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Splitter.prototype.com_unhurdle_spectrum_Splitter__cursor = null;


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Splitter.prototype.draggable;


com.unhurdle.spectrum.Splitter.prototype.get__draggable = function() {
  return this.com_unhurdle_spectrum_Splitter__draggable;
};


com.unhurdle.spectrum.Splitter.prototype.set__draggable = function(value) {
  this.com_unhurdle_spectrum_Splitter__draggable = value;
  if (value) {
    if (this.com_unhurdle_spectrum_Splitter__cursor) {
      this.setStyle("cursor", this.com_unhurdle_spectrum_Splitter__cursor);
    }
    if (!this.element.children.length) {
      this.element.appendChild(com.unhurdle.spectrum.newElement("div", "spectrum-SplitView-gripper"));
    }
  } else {
    this.setStyle("cursor", "");
    if (this.element.children.length) {
      this.element.removeChild(this.element.children[0]);
    }
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.Splitter.prototype.cursor;


com.unhurdle.spectrum.Splitter.prototype.get__cursor = function() {
  return this.com_unhurdle_spectrum_Splitter__cursor;
};


com.unhurdle.spectrum.Splitter.prototype.set__cursor = function(value) {
  this.com_unhurdle_spectrum_Splitter__cursor = value;
  if (this.draggable) {
    this.setStyle("cursor", value);
  }
};


Object.defineProperties(com.unhurdle.spectrum.Splitter.prototype, /** @lends {com.unhurdle.spectrum.Splitter.prototype} */ {
/**
 * @type {boolean}
 */
draggable: {
get: com.unhurdle.spectrum.Splitter.prototype.get__draggable,
set: com.unhurdle.spectrum.Splitter.prototype.set__draggable},
/**
 * @type {string}
 */
cursor: {
get: com.unhurdle.spectrum.Splitter.prototype.get__cursor,
set: com.unhurdle.spectrum.Splitter.prototype.set__cursor}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.Splitter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Splitter', qName: 'com.unhurdle.spectrum.Splitter', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.Splitter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'draggable': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Splitter'},
        'cursor': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Splitter'}
      };
    },
    methods: function () {
      return {
        'Splitter': { type: '', declaredBy: 'com.unhurdle.spectrum.Splitter'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.Splitter.prototype.ROYALE_COMPILE_FLAGS = 11;
