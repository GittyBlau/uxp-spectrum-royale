/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/RadioGroup.as
 * com.unhurdle.spectrum.RadioGroup
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.RadioGroup');
/* Royale Dependency List: org.apache.royale.core.WrappedHTMLElement*/

goog.require('com.unhurdle.spectrum.Group');



/**
 * @constructor
 * @extends {com.unhurdle.spectrum.Group}
 */
com.unhurdle.spectrum.RadioGroup = function() {
  com.unhurdle.spectrum.RadioGroup.base(this, 'constructor');
};
goog.inherits(com.unhurdle.spectrum.RadioGroup, com.unhurdle.spectrum.Group);


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.RadioGroup.prototype.getSelector = function() {
  return "";
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.RadioGroup.prototype.getTag = function() {
  return "sp-radio-group";
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.RadioGroup.prototype.createElement = function() {
  var /** @type {org.apache.royale.core.WrappedHTMLElement} */ elem = com.unhurdle.spectrum.RadioGroup.superClass_.createElement.apply(this);
  return elem;
};


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.RadioGroup.prototype.com_unhurdle_spectrum_RadioGroup__selected = null;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.RadioGroup.prototype.com_unhurdle_spectrum_RadioGroup__radioName = null;


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.RadioGroup.prototype.selected;


com.unhurdle.spectrum.RadioGroup.prototype.get__selected = function() {
  return this.com_unhurdle_spectrum_RadioGroup__selected;
};


com.unhurdle.spectrum.RadioGroup.prototype.set__selected = function(value) {
  if (value != this.com_unhurdle_spectrum_RadioGroup__selected) {
    this.setAttribute('selected', value);
  }
  this.com_unhurdle_spectrum_RadioGroup__selected = value;
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
com.unhurdle.spectrum.RadioGroup.prototype.radioName;


com.unhurdle.spectrum.RadioGroup.prototype.get__radioName = function() {
  return this.com_unhurdle_spectrum_RadioGroup__radioName;
};


com.unhurdle.spectrum.RadioGroup.prototype.set__radioName = function(value) {
  if (value != this.com_unhurdle_spectrum_RadioGroup__radioName) {
    this.setAttribute('name', value);
  }
  this.com_unhurdle_spectrum_RadioGroup__radioName = value;
};


Object.defineProperties(com.unhurdle.spectrum.RadioGroup.prototype, /** @lends {com.unhurdle.spectrum.RadioGroup.prototype} */ {
/**
 * @type {string}
 */
selected: {
get: com.unhurdle.spectrum.RadioGroup.prototype.get__selected,
set: com.unhurdle.spectrum.RadioGroup.prototype.set__selected},
/**
 * @type {string}
 */
radioName: {
get: com.unhurdle.spectrum.RadioGroup.prototype.get__radioName,
set: com.unhurdle.spectrum.RadioGroup.prototype.set__radioName}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.RadioGroup.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'RadioGroup', qName: 'com.unhurdle.spectrum.RadioGroup', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.RadioGroup.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'selected': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.RadioGroup'},
        'radioName': { type: 'String', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.RadioGroup'}
      };
    },
    methods: function () {
      return {
        'RadioGroup': { type: '', declaredBy: 'com.unhurdle.spectrum.RadioGroup'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.RadioGroup.prototype.ROYALE_COMPILE_FLAGS = 11;
