/**
 * Generated by Apache Royale Compiler from com/unhurdle/spectrum/Calendar.as
 * com.unhurdle.spectrum.Calendar
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('com.unhurdle.spectrum.Calendar');
/* Royale Dependency List: com.unhurdle.spectrum.ActionButton,com.unhurdle.spectrum.CalendarDay,com.unhurdle.spectrum.Icon,com.unhurdle.spectrum.TextNode,com.unhurdle.spectrum.model.DatePickerModel,com.unhurdle.spectrum.newElement,com.unhurdle.spectrum.utils.DateUtil,org.apache.royale.core.WrappedHTMLElement,org.apache.royale.events.Event,org.apache.royale.events.MouseEvent,org.apache.royale.events.ValueEvent,org.apache.royale.html.elements.Div,org.apache.royale.html.elements.Table,org.apache.royale.html.elements.Tbody,org.apache.royale.html.elements.Td,org.apache.royale.html.elements.Tr,org.apache.royale.utils.Language*/

goog.require('com.unhurdle.spectrum.Group');



/**
 * <inject_html>
 * <link rel="stylesheet" href="assets/css/components/calendar/dist.css">
 * </inject_html>
 * 
 * @constructor
 * @extends {com.unhurdle.spectrum.Group}
 */
com.unhurdle.spectrum.Calendar = function() {
  var self = this;
  com.unhurdle.spectrum.Calendar.base(this, 'constructor');
  this.model = this.com_unhurdle_spectrum_Calendar_datePickerModel = new com.unhurdle.spectrum.model.DatePickerModel();
  this.model["addEventListener"]("selectedDateChanged", function(ev) {
    self.dispatchEvent(new org.apache.royale.events.ValueEvent("selectedDateChanged", self.selectedDate));
    self.dispatchEvent(new org.apache.royale.events.Event("change"));
  });
  this.addEventListener("displayedMonthChanged", org.apache.royale.utils.Language.closure(this.com_unhurdle_spectrum_Calendar_handleModelChange, this, 'com_unhurdle_spectrum_Calendar_handleModelChange'));
};
goog.inherits(com.unhurdle.spectrum.Calendar, com.unhurdle.spectrum.Group);


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Calendar.prototype.getSelector = function() {
  return "spectrum-Calendar";
};


/**
 * @private
 * @type {com.unhurdle.spectrum.model.DatePickerModel}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_datePickerModel = null;


/**
 * @private
 * @type {com.unhurdle.spectrum.TextNode}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_title = null;


/**
 * @private
 * @type {string}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar__text = null;


/**
 * @private
 * @type {com.unhurdle.spectrum.ActionButton}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_prev = null;


/**
 * @private
 * @type {com.unhurdle.spectrum.ActionButton}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_next = null;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar__disabled = false;


/**
 * @private
 * @type {org.apache.royale.html.elements.Table}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_table = null;


/**
 * @private
 * @type {org.apache.royale.html.elements.Tbody}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_calenderBody = null;


/**
 * @private
 * @type {Date}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar__startDate = null;


/**
 * @private
 * @type {Date}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar__endDate = null;


/**
 * @private
 * @type {Array.<com.unhurdle.spectrum.CalendarDay>}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_displayedDates = null;


/**
 * @private
 * @type {boolean}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar__useNarrowHeaders = false;


/**
 * @private
 * @param {number} i
 * @return {string}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_getWeekdays = function(i) {
  if (this.useNarrowHeaders) {
    return org.apache.royale.utils.Language.string(this.com_unhurdle_spectrum_Calendar_datePickerModel.narrowDayNames[i]);
  }
  return org.apache.royale.utils.Language.string(this.com_unhurdle_spectrum_Calendar_datePickerModel.shortDayNames[i]);
};


/**
 * @private
 * @type {Date}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar__today = null;


/**
 * @private
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_updateCalendar = function() {
  this.com_unhurdle_spectrum_Calendar_datePickerModel.updateCalendar();
  this.com_unhurdle_spectrum_Calendar_updateDisplay();
};


/**
 * @return {number}
 */
com.unhurdle.spectrum.Calendar.prototype.getIndexForSelectedDate = function() {
  return this.com_unhurdle_spectrum_Calendar_datePickerModel.getIndexForSelectedDate();
};


/**
 * @private
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_updateDisplay = function() {
  this.com_unhurdle_spectrum_Calendar_title.text = this.com_unhurdle_spectrum_Calendar_datePickerModel.monthNames[this.displayedMonth] + " " + String(this.displayedYear);
  this.com_unhurdle_spectrum_Calendar_setDates();
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_handleModelChange = function(event) {
  this.com_unhurdle_spectrum_Calendar_updateDisplay();
};


/**
 * @param {Date} start
 * @param {Date} end
 */
com.unhurdle.spectrum.Calendar.prototype.selectRange = function(start, end) {
  var foreachiter0_target = this.com_unhurdle_spectrum_Calendar_displayedDates;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var day = foreachiter0_target[foreachiter0];
  {
    day.setRange(start, end);
  }}
  
};


/**
 * @private
 * @param {org.apache.royale.events.MouseEvent} event
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_prevMonthClickHandler = function(event) {
  event.preventDefault();
  var /** @type {number} */ month = this.displayedMonth - 1;
  var /** @type {number} */ year = this.displayedYear;
  if (month < 0) {
    month = 11;
    year--;
  }
  this.com_unhurdle_spectrum_Calendar_datePickerModel.displayedMonth = month;
  this.com_unhurdle_spectrum_Calendar_datePickerModel.displayedYear = year;
  this.com_unhurdle_spectrum_Calendar_updateDisplay();
};


/**
 * @private
 * @param {org.apache.royale.events.MouseEvent} event
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_nextMonthClickHandler = function(event) {
  event.preventDefault();
  var /** @type {number} */ month = this.displayedMonth + 1;
  var /** @type {number} */ year = this.displayedYear;
  if (month >= 12) {
    month = 0;
    year++;
  }
  this.com_unhurdle_spectrum_Calendar_datePickerModel.displayedMonth = month;
  this.com_unhurdle_spectrum_Calendar_datePickerModel.displayedYear = year;
  this.com_unhurdle_spectrum_Calendar_updateDisplay();
};


/**
 * @override
 */
com.unhurdle.spectrum.Calendar.prototype.addedToParent = function() {
  com.unhurdle.spectrum.Calendar.superClass_.addedToParent.apply(this);
  if (!this.displayedYear) {
    this.com_unhurdle_spectrum_Calendar_datePickerModel.displayedYear = this.today.getFullYear();
  }
  if (!this.displayedMonth) {
    this.com_unhurdle_spectrum_Calendar_datePickerModel.displayedMonth = this.today.getMonth();
  }
  var /** @type {HTMLElement} */ body = com.unhurdle.spectrum.newElement('div');
  body.className = this.appendSelector("-body");
  body.setAttribute("role", "grid");
  body.tabIndex = 0;
  this.com_unhurdle_spectrum_Calendar_table = new org.apache.royale.html.elements.Table();
  this.com_unhurdle_spectrum_Calendar_table.className = this.appendSelector("-table");
  this.com_unhurdle_spectrum_Calendar_table.setAttribute("role", "presentation");
  var /** @type {HTMLElement} */ daysOfTheWeekHeader = com.unhurdle.spectrum.newElement('thead');
  daysOfTheWeekHeader.setAttribute("role", "presentation");
  var /** @type {HTMLElement} */ daysOfTheWeek = com.unhurdle.spectrum.newElement('tr');
  daysOfTheWeek.setAttribute("role", "row");
  for (var /** @type {number} */ i = 0; i < 7; i++) {
    var /** @type {HTMLElement} */ dayOfWeek = com.unhurdle.spectrum.newElement('th');
    dayOfWeek.className = this.appendSelector("-tableCell");
    dayOfWeek.setAttribute("role", "columnheader");
    dayOfWeek.setAttribute("scope", "col");
    var /** @type {com.unhurdle.spectrum.TextNode} */ d = new com.unhurdle.spectrum.TextNode('abbr');
    d.className = this.appendSelector("-dayOfWeek");
    d.text = this.com_unhurdle_spectrum_Calendar_getWeekdays(i);
    d.element.title = org.apache.royale.utils.Language.string(this.com_unhurdle_spectrum_Calendar_datePickerModel.dayNames[i]);
    dayOfWeek.appendChild(d.element);
    daysOfTheWeek.appendChild(dayOfWeek);
  }
  daysOfTheWeekHeader.appendChild(daysOfTheWeek);
  this.com_unhurdle_spectrum_Calendar_table.element.appendChild(daysOfTheWeekHeader);
  body.appendChild(this.com_unhurdle_spectrum_Calendar_table.element);
  this.com_unhurdle_spectrum_Calendar_table.addedToParent();
  this.element.appendChild(body);
  this.com_unhurdle_spectrum_Calendar_updateCalendar();
};


/**
 * @protected
 * @override
 */
com.unhurdle.spectrum.Calendar.prototype.createElement = function() {
  com.unhurdle.spectrum.Calendar.superClass_.createElement.apply(this);
  var /** @type {string} */ styleStr = "width:280px;z-index:1;";
  this.setAttribute("style", styleStr);
  var /** @type {org.apache.royale.html.elements.Div} */ header = new org.apache.royale.html.elements.Div();
  header.className = this.appendSelector("-header");
  this.com_unhurdle_spectrum_Calendar_title = new com.unhurdle.spectrum.TextNode('div');
  this.com_unhurdle_spectrum_Calendar_title.className = this.appendSelector("-title");
  this.com_unhurdle_spectrum_Calendar_title.setAttribute("role", "heading");
  header.element.appendChild(this.com_unhurdle_spectrum_Calendar_title.element);
  this.com_unhurdle_spectrum_Calendar_prev = new com.unhurdle.spectrum.ActionButton();
  this.com_unhurdle_spectrum_Calendar_prev.quiet = true;
  this.com_unhurdle_spectrum_Calendar_prev.className = this.appendSelector("-prevMonth");
  this.com_unhurdle_spectrum_Calendar_prev.element.title = "Previous";
  this.com_unhurdle_spectrum_Calendar_prev.addEventListener("click", org.apache.royale.utils.Language.closure(this.com_unhurdle_spectrum_Calendar_prevMonthClickHandler, this, 'com_unhurdle_spectrum_Calendar_prevMonthClickHandler'));
  var /** @type {string} */ type = "ChevronLeftLarge";
  var /** @type {com.unhurdle.spectrum.Icon} */ prevIcon = new com.unhurdle.spectrum.Icon(com.unhurdle.spectrum.Icon.getCSSTypeSelector(type));
  prevIcon.type = type;
  this.com_unhurdle_spectrum_Calendar_prev.addElement(prevIcon);
  header.addElement(this.com_unhurdle_spectrum_Calendar_prev);
  this.com_unhurdle_spectrum_Calendar_next = new com.unhurdle.spectrum.ActionButton();
  this.com_unhurdle_spectrum_Calendar_next.quiet = true;
  this.com_unhurdle_spectrum_Calendar_next.className = this.appendSelector("-nextMonth");
  this.com_unhurdle_spectrum_Calendar_next.element.title = "Next";
  this.com_unhurdle_spectrum_Calendar_next.addEventListener("click", org.apache.royale.utils.Language.closure(this.com_unhurdle_spectrum_Calendar_nextMonthClickHandler, this, 'com_unhurdle_spectrum_Calendar_nextMonthClickHandler'));
  type = "ChevronRightLarge";
  var /** @type {com.unhurdle.spectrum.Icon} */ nextIcon = new com.unhurdle.spectrum.Icon(com.unhurdle.spectrum.Icon.getCSSTypeSelector(type));
  nextIcon.type = type;
  this.com_unhurdle_spectrum_Calendar_next.addElement(nextIcon);
  header.addElement(this.com_unhurdle_spectrum_Calendar_next);
  this.addElement(header);
  return this.element;
};


/**
 * @private
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_setDates = function() {
  this.com_unhurdle_spectrum_Calendar_displayedDates = new (org.apache.royale.utils.Language.synthVector('com.unhurdle.spectrum.CalendarDay'))();
  if (this.com_unhurdle_spectrum_Calendar_table.numElements && this.com_unhurdle_spectrum_Calendar_calenderBody) {
    this.com_unhurdle_spectrum_Calendar_table.removeElement(this.com_unhurdle_spectrum_Calendar_calenderBody);
  }
  this.com_unhurdle_spectrum_Calendar_calenderBody = new org.apache.royale.html.elements.Tbody();
  this.com_unhurdle_spectrum_Calendar_calenderBody.setAttribute("role", "presentation");
  var /** @type {number} */ l = 0;
  for (var /** @type {number} */ k = 0; k < 6; k++, l--) {
    var /** @type {org.apache.royale.html.elements.Tr} */ calenderRow = new org.apache.royale.html.elements.Tr();
    calenderRow.setAttribute("role", "row");
    var /** @type {boolean} */ addRow = true;
    for (var /** @type {number} */ j = 0; j < 7; j++, l++) {
      var /** @type {org.apache.royale.html.elements.Td} */ cell = new org.apache.royale.html.elements.Td();
      cell.setAttribute("role", "gridcell");
      cell.className = this.appendSelector("-tableCell");
      cell.tabIndex = -1;
      var /** @type {com.unhurdle.spectrum.CalendarDay} */ span = new com.unhurdle.spectrum.CalendarDay();
      if (j == 0) {
        span.firstInWeek = true;
      } else if (j == 6) {
        span.lastInWeek = true;
      }
      if (this.days[k + l] && this.days[k + l]["getDate"]() == 1) {
        span.firstInMonth = true;
      } else if (this.days[k + l] && new Date(this.days[k + l]["getTime"]() + 86400000).getDate() === 1) {
        span.lastInMonth = true;
      }
      span.disabled = this.disabled;
      if (span.firstInWeek && k + l > 7 && !this.days[k + l]) {
        addRow = false;
        break;
      }
      this.com_unhurdle_spectrum_Calendar_displayedDates.push(span);
      if (this.days[k + l]) {
        span.isToday = this.days[k + l]["toDateString"]() == this.today.toDateString();
        cell.element.title = com.unhurdle.spectrum.utils.DateUtil.getDateString(this.days[k + l]);
        span.date = this.days[k + l];
        span.addEventListener(org.apache.royale.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.com_unhurdle_spectrum_Calendar_handleSelectedDay, this, 'com_unhurdle_spectrum_Calendar_handleSelectedDay'));
      } else {
        span.isOutsideMonth = true;
      }
      cell.addElement(span);
      calenderRow.addElement(cell);
    }
    if (addRow) {
      this.com_unhurdle_spectrum_Calendar_calenderBody.addElement(calenderRow);
    }
  }
  this.com_unhurdle_spectrum_Calendar_table.addElement(this.com_unhurdle_spectrum_Calendar_calenderBody);
  var /** @type {Date} */ start = this.selectedDate;
  var /** @type {Date} */ end = this.selectedDate;
  if (this.startDate) {
    start = this.startDate;
  }
  if (this.endDate) {
    end = this.endDate;
  }
  this.selectRange(start, end);
};


/**
 * @private
 * @param {*} ev
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_handleSelectedDay = function(ev) {
  var /** @type {com.unhurdle.spectrum.CalendarDay} */ clickedDay = ev["target"];
  var /** @type {Date} */ date = clickedDay.date;
  var /** @type {Date} */ start = date;
  var /** @type {Date} */ end = date;
  if (this.startDate) {
    if (!this.endDate && date > this.startDate) {
      start = this.startDate;
    } else {
      return;
    }
  } else {
    if (this.endDate) {
      if (date < this.endDate) {
        end = this.endDate;
      } else {
        return;
      }
    }
  }
  this.com_unhurdle_spectrum_Calendar_datePickerModel.selectedDate = date;
  if (this.com_unhurdle_spectrum_Calendar_elementSelected) {
    this.com_unhurdle_spectrum_Calendar_elementSelected.selected = false;
  }
  this.selectRange(start, end);
  this.com_unhurdle_spectrum_Calendar_elementSelected = clickedDay;
};


/**
 * @private
 * @type {com.unhurdle.spectrum.CalendarDay}
 */
com.unhurdle.spectrum.Calendar.prototype.com_unhurdle_spectrum_Calendar_elementSelected = null;


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Calendar.prototype.useNarrowHeaders;


com.unhurdle.spectrum.Calendar.prototype.get__useNarrowHeaders = function() {
  return this.com_unhurdle_spectrum_Calendar__useNarrowHeaders;
};


com.unhurdle.spectrum.Calendar.prototype.set__useNarrowHeaders = function(value) {
  this.com_unhurdle_spectrum_Calendar__useNarrowHeaders = value;
};


/**
 * @nocollapse
 * @export
 * @type {boolean}
 */
com.unhurdle.spectrum.Calendar.prototype.disabled;


com.unhurdle.spectrum.Calendar.prototype.get__disabled = function() {
  return this.com_unhurdle_spectrum_Calendar__disabled;
};


com.unhurdle.spectrum.Calendar.prototype.set__disabled = function(value) {
  this.com_unhurdle_spectrum_Calendar__disabled = value;
  this.com_unhurdle_spectrum_Calendar_prev.disabled = value;
  this.com_unhurdle_spectrum_Calendar_next.disabled = value;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
com.unhurdle.spectrum.Calendar.prototype.dayNames;


com.unhurdle.spectrum.Calendar.prototype.get__dayNames = function() {
  return this.com_unhurdle_spectrum_Calendar_datePickerModel.dayNames;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
com.unhurdle.spectrum.Calendar.prototype.monthNames;


com.unhurdle.spectrum.Calendar.prototype.get__monthNames = function() {
  return this.com_unhurdle_spectrum_Calendar_datePickerModel.monthNames;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.Calendar.prototype.displayedYear;


com.unhurdle.spectrum.Calendar.prototype.get__displayedYear = function() {
  return this.com_unhurdle_spectrum_Calendar_datePickerModel.displayedYear;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.Calendar.prototype.displayedMonth;


com.unhurdle.spectrum.Calendar.prototype.get__displayedMonth = function() {
  return this.com_unhurdle_spectrum_Calendar_datePickerModel.displayedMonth;
};


/**
 * @nocollapse
 * @export
 * @type {number}
 */
com.unhurdle.spectrum.Calendar.prototype.firstDayOfWeek;


com.unhurdle.spectrum.Calendar.prototype.get__firstDayOfWeek = function() {
  return this.com_unhurdle_spectrum_Calendar_datePickerModel.firstDayOfWeek;
};


/**
 * @nocollapse
 * @export
 * @type {Array}
 */
com.unhurdle.spectrum.Calendar.prototype.days;


com.unhurdle.spectrum.Calendar.prototype.get__days = function() {
  return this.com_unhurdle_spectrum_Calendar_datePickerModel.days;
};


/**
 * @nocollapse
 * @export
 * @type {Date}
 */
com.unhurdle.spectrum.Calendar.prototype.today;


com.unhurdle.spectrum.Calendar.prototype.get__today = function() {
  if (!this.com_unhurdle_spectrum_Calendar__today) {
    this.com_unhurdle_spectrum_Calendar__today = new Date();
  }
  return this.com_unhurdle_spectrum_Calendar__today;
};


/**
 * @nocollapse
 * @export
 * @type {Date}
 */
com.unhurdle.spectrum.Calendar.prototype.selectedDate;


com.unhurdle.spectrum.Calendar.prototype.get__selectedDate = function() {
  return this.com_unhurdle_spectrum_Calendar_datePickerModel.selectedDate;
};


com.unhurdle.spectrum.Calendar.prototype.set__selectedDate = function(value) {
  this.com_unhurdle_spectrum_Calendar_datePickerModel.selectedDate = value;
};


/**
 * @nocollapse
 * @export
 * @type {Date}
 */
com.unhurdle.spectrum.Calendar.prototype.startDate;


com.unhurdle.spectrum.Calendar.prototype.get__startDate = function() {
  return this.com_unhurdle_spectrum_Calendar__startDate;
};


com.unhurdle.spectrum.Calendar.prototype.set__startDate = function(value) {
  this.com_unhurdle_spectrum_Calendar__startDate = value;
  this.com_unhurdle_spectrum_Calendar_updateDisplay();
};


/**
 * @nocollapse
 * @export
 * @type {Date}
 */
com.unhurdle.spectrum.Calendar.prototype.endDate;


com.unhurdle.spectrum.Calendar.prototype.get__endDate = function() {
  return this.com_unhurdle_spectrum_Calendar__endDate;
};


com.unhurdle.spectrum.Calendar.prototype.set__endDate = function(value) {
  this.com_unhurdle_spectrum_Calendar__endDate = value;
  this.com_unhurdle_spectrum_Calendar_updateDisplay();
};


Object.defineProperties(com.unhurdle.spectrum.Calendar.prototype, /** @lends {com.unhurdle.spectrum.Calendar.prototype} */ {
/**
 * @type {boolean}
 */
useNarrowHeaders: {
get: com.unhurdle.spectrum.Calendar.prototype.get__useNarrowHeaders,
set: com.unhurdle.spectrum.Calendar.prototype.set__useNarrowHeaders},
/**
 * @type {boolean}
 */
disabled: {
get: com.unhurdle.spectrum.Calendar.prototype.get__disabled,
set: com.unhurdle.spectrum.Calendar.prototype.set__disabled},
/**
 * @type {Array}
 */
dayNames: {
get: com.unhurdle.spectrum.Calendar.prototype.get__dayNames},
/**
 * @type {Array}
 */
monthNames: {
get: com.unhurdle.spectrum.Calendar.prototype.get__monthNames},
/**
 * @type {number}
 */
displayedYear: {
get: com.unhurdle.spectrum.Calendar.prototype.get__displayedYear},
/**
 * @type {number}
 */
displayedMonth: {
get: com.unhurdle.spectrum.Calendar.prototype.get__displayedMonth},
/**
 * @type {number}
 */
firstDayOfWeek: {
get: com.unhurdle.spectrum.Calendar.prototype.get__firstDayOfWeek},
/**
 * @type {Array}
 */
days: {
get: com.unhurdle.spectrum.Calendar.prototype.get__days},
/**
 * @type {Date}
 */
today: {
get: com.unhurdle.spectrum.Calendar.prototype.get__today},
/**
 * @type {Date}
 */
selectedDate: {
get: com.unhurdle.spectrum.Calendar.prototype.get__selectedDate,
set: com.unhurdle.spectrum.Calendar.prototype.set__selectedDate},
/**
 * @type {Date}
 */
startDate: {
get: com.unhurdle.spectrum.Calendar.prototype.get__startDate,
set: com.unhurdle.spectrum.Calendar.prototype.set__startDate},
/**
 * @type {Date}
 */
endDate: {
get: com.unhurdle.spectrum.Calendar.prototype.get__endDate,
set: com.unhurdle.spectrum.Calendar.prototype.set__endDate}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.unhurdle.spectrum.Calendar.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Calendar', qName: 'com.unhurdle.spectrum.Calendar', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.unhurdle.spectrum.Calendar.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'useNarrowHeaders': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'disabled': { type: 'Boolean', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'dayNames': { type: 'Array', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'monthNames': { type: 'Array', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'displayedYear': { type: 'Number', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'displayedMonth': { type: 'Number', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'firstDayOfWeek': { type: 'Number', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'days': { type: 'Array', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'today': { type: 'Date', access: 'readonly', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'selectedDate': { type: 'Date', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'startDate': { type: 'Date', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'endDate': { type: 'Date', access: 'readwrite', declaredBy: 'com.unhurdle.spectrum.Calendar'}
      };
    },
    methods: function () {
      return {
        'Calendar': { type: '', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'getIndexForSelectedDate': { type: 'Number', declaredBy: 'com.unhurdle.spectrum.Calendar'},
        'selectRange': { type: 'void', declaredBy: 'com.unhurdle.spectrum.Calendar', parameters: function () { return [ 'Date', false ,'Date', false ]; }},
        'addedToParent': { type: 'void', declaredBy: 'com.unhurdle.spectrum.Calendar'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
com.unhurdle.spectrum.Calendar.prototype.ROYALE_COMPILE_FLAGS = 11;
